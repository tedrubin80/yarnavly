// package.json dependencies
/*
{
  "dependencies": {
    "express": "^4.18.2",
    "express-rate-limit": "^6.7.0",
    "helmet": "^6.1.5",
    "cors": "^2.8.5",
    "pg": "^8.11.0",
    "sequelize": "^6.31.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "multer": "^1.4.5-lts.1",
    "googleapis": "^118.0.0",
    "redis": "^4.6.6",
    "axios": "^1.4.0",
    "node-cron": "^3.0.2",
    "winston": "^3.8.2",
    "joi": "^17.9.2",
    "dotenv": "^16.0.3",
    "sharp": "^0.32.1"
  }
}
*/

// src/app.js - Main application setup
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const { sequelize } = require('./config/database');
const routes = require('./routes');
const { errorHandler } = require('./middleware/errorHandler');
const { logger } = require('./utils/logger');

const app = express();

// Security middleware
app.use(helmet());
app.use(cors({
  origin: process.env.FRONTEND_URL,
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 1000 // limit each IP to 1000 requests per windowMs
});
app.use('/api/', limiter);

// Body parsing
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Routes
app.use('/api/auth', routes.auth);
app.use('/api/yarn', routes.yarn);
app.use('/api/patterns', routes.patterns);
app.use('/api/projects', routes.projects);
app.use('/api/ravelry', routes.ravelry);
app.use('/api/drive', routes.googleDrive);
app.use('/api/admin', routes.admin);
app.use('/api/sync', routes.sync);

// Error handling
app.use(errorHandler);

module.exports = app;

// src/routes/index.js - Route exports
module.exports = {
  auth: require('./auth'),
  yarn: require('./yarn'),
  patterns: require('./patterns'),
  projects: require('./projects'),
  ravelry: require('./ravelry'),
  googleDrive: require('./googleDrive'),
  admin: require('./admin'),
  sync: require('./sync')
};

// src/routes/yarn.js - Yarn inventory management
const express = require('express');
const router = express.Router();
const { auth, adminAuth } = require('../middleware/auth');
const yarnController = require('../controllers/yarnController');
const { upload } = require('../middleware/upload');

// Yarn inventory CRUD
router.get('/', auth, yarnController.getUserYarnInventory);
router.post('/', auth, upload.array('photos', 10), yarnController.createYarnEntry);
router.get('/:id', auth, yarnController.getYarnById);
router.put('/:id', auth, upload.array('photos', 10), yarnController.updateYarnEntry);
router.delete('/:id', auth, yarnController.deleteYarnEntry);

// Yarn search and filtering
router.post('/search', auth, yarnController.searchYarn);
router.get('/brands', auth, yarnController.getAllBrands);
router.get('/brands/:brandId/lines', auth, yarnController.getYarnLinesByBrand);

// Yarn usage tracking
router.get('/:id/usage', auth, yarnController.getYarnUsage);
router.post('/:id/use', auth, yarnController.recordYarnUsage);

// Shopping list integration
router.get('/:id/add-to-shopping-list', auth, yarnController.addToShoppingList);

// Admin routes
router.post('/brands', adminAuth, yarnController.createBrand);
router.post('/lines', adminAuth, yarnController.createYarnLine);

module.exports = router;

// src/routes/patterns.js - Pattern library management
const express = require('express');
const router = express.Router();
const { auth } = require('../middleware/auth');
const patternController = require('../controllers/patternController');
const { upload } = require('../middleware/upload');

// Pattern CRUD
router.get('/', auth, patternController.getUserPatterns);
router.post('/', auth, upload.single('patternFile'), patternController.createPattern);
router.get('/:id', auth, patternController.getPatternById);
router.put('/:id', auth, upload.single('patternFile'), patternController.updatePattern);
router.delete('/:id', auth, patternController.deletePattern);

// Pattern search and filtering
router.post('/search', auth, patternController.searchPatterns);
router.get('/categories', auth, patternController.getCategories);

// Pattern viewing and download
router.get('/:id/view', auth, patternController.viewPattern);
router.get('/:id/download', auth, patternController.downloadPattern);

// Pattern recommendations
router.get('/recommendations/by-stash', auth, patternController.getPatternsByStash);
router.get('/recommendations/similar/:id', auth, patternController.getSimilarPatterns);

module.exports = router;

// src/routes/projects.js - Project management
const express = require('express');
const router = express.Router();
const { auth } = require('../middleware/auth');
const projectController = require('../controllers/projectController');
const { upload } = require('../middleware/upload');

// Project CRUD
router.get('/', auth, projectController.getUserProjects);
router.post('/', auth, projectController.createProject);
router.get('/:id', auth, projectController.getProjectById);
router.put('/:id', auth, projectController.updateProject);
router.delete('/:id', auth, projectController.deleteProject);

// Project status management
router.patch('/:id/status', auth, projectController.updateProjectStatus);
router.get('/by-status/:status', auth, projectController.getProjectsByStatus);

// Progress tracking
router.post('/:id/progress', auth, upload.single('progressPhoto'), projectController.addProgress);
router.get('/:id/progress', auth, projectController.getProjectProgress);

// Yarn assignment
router.post('/:id/yarn', auth, projectController.assignYarnToProject);
router.delete('/:id/yarn/:yarnId', auth, projectController.removeYarnFromProject);

// Photos
router.post('/:id/photos', auth, upload.array('photos', 20), projectController.addProjectPhotos);
router.delete('/:id/photos/:photoId', auth, projectController.deleteProjectPhoto);

module.exports = router;

// src/routes/ravelry.js - Ravelry API integration
const express = require('express');
const router = express.Router();
const { auth } = require('../middleware/auth');
const ravelryController = require('../controllers/ravelryController');

// Authentication
router.post('/connect', auth, ravelryController.connectRavelryAccount);
router.delete('/disconnect', auth, ravelryController.disconnectRavelryAccount);
router.get('/status', auth, ravelryController.getRavelryStatus);

// Data import
router.post('/import/stash', auth, ravelryController.importStashFromRavelry);
router.post('/import/queue', auth, ravelryController.importQueueFromRavelry);
router.post('/import/projects', auth, ravelryController.importProjectsFromRavelry);

// Pattern search
router.post('/patterns/search', auth, ravelryController.searchRavelryPatterns);
router.get('/patterns/:ravelryId', auth, ravelryController.getRavelryPattern);

// Yarn search
router.post('/yarns/search', auth, ravelryController.searchRavelryYarns);
router.get('/yarns/:ravelryId', auth, ravelryController.getRavelryYarn);

// Sync operations
router.post('/sync/stash', auth, ravelryController.syncStashToRavelry);
router.post('/sync/projects', auth, ravelryController.syncProjectsToRavelry);

module.exports = router;

// src/routes/googleDrive.js - Google Drive integration
const express = require('express');
const router = express.Router();
const { auth } = require('../middleware/auth');
const driveController = require('../controllers/driveController');

// Authentication
router.post('/connect', auth, driveController.connectGoogleDrive);
router.delete('/disconnect', auth, driveController.disconnectGoogleDrive);
router.get('/status', auth, driveController.getDriveStatus);

// File operations
router.post('/upload', auth, driveController.uploadFile);
router.get('/download/:fileId', auth, driveController.downloadFile);
router.delete('/delete/:fileId', auth, driveController.deleteFile);

// Backup operations
router.post('/backup/full', auth, driveController.createFullBackup);
router.post('/backup/patterns', auth, driveController.backupPatterns);
router.post('/backup/photos', auth, driveController.backupPhotos);
router.get('/backups', auth, driveController.listBackups);
router.post('/restore/:backupId', auth, driveController.restoreFromBackup);

// Folder management
router.post('/folders', auth, driveController.createFolder);
router.get('/folders', auth, driveController.listFolders);

module.exports = router;

// src/routes/admin.js - Admin panel routes
const express = require('express');
const router = express.Router();
const { adminAuth } = require('../middleware/auth');
const adminController = require('../controllers/adminController');

// User management
router.get('/users', adminAuth, adminController.getAllUsers);
router.get('/users/:id', adminAuth, adminController.getUserById);
router.put('/users/:id', adminAuth, adminController.updateUser);
router.delete('/users/:id', adminAuth, adminController.deleteUser);

// System statistics
router.get('/stats/overview', adminAuth, adminController.getSystemOverview);
router.get('/stats/usage', adminAuth, adminController.getUsageStats);
router.get('/stats/storage', adminAuth, adminController.getStorageStats);

// Yarn database management
router.get('/yarn/brands', adminAuth, adminController.getAllBrands);
router.post('/yarn/brands', adminAuth, adminController.createBrand);
router.put('/yarn/brands/:id', adminAuth, adminController.updateBrand);
router.delete('/yarn/brands/:id', adminAuth, adminController.deleteBrand);

router.get('/yarn/lines', adminAuth, adminController.getAllYarnLines);
router.post('/yarn/lines', adminAuth, adminController.createYarnLine);
router.put('/yarn/lines/:id', adminAuth, adminController.updateYarnLine);

// System settings
router.get('/settings', adminAuth, adminController.getSystemSettings);
router.put('/settings/:key', adminAuth, adminController.updateSystemSetting);

// Sync monitoring
router.get('/sync/logs', adminAuth, adminController.getSyncLogs);
router.get('/sync/status', adminAuth, adminController.getSyncStatus);
router.post('/sync/reset/:userId', adminAuth, adminController.resetUserSync);

// Backup management
router.get('/backups', adminAuth, adminController.getAllBackups);
router.post('/backups/system', adminAuth, adminController.createSystemBackup);

module.exports = router;

// src/controllers/yarnController.js - Example controller
const { YarnInventory, YarnLine, YarnBrand, ProjectYarnUsage } = require('../models');
const { Op } = require('sequelize');
const { uploadToGoogleDrive } = require('../services/googleDriveService');
const { syncToRavelry } = require('../services/ravelryService');

class YarnController {
  async getUserYarnInventory(req, res) {
    try {
      const { page = 1, limit = 20, search, brand, weight, color } = req.query;
      const offset = (page - 1) * limit;

      const whereClause = { user_id: req.user.id };

      // Build search filters
      if (search) {
        whereClause[Op.or] = [
          { colorway: { [Op.iLike]: `%${search}%` } },
          { notes: { [Op.iLike]: `%${search}%` } },
          { storage_location: { [Op.iLike]: `%${search}%` } }
        ];
      }

      if (color) {
        whereClause.color_family = color;
      }

      const yarn = await YarnInventory.findAndCountAll({
        where: whereClause,
        include: [
          {
            model: YarnLine,
            include: [YarnBrand],
            where: brand ? { '$YarnLine.YarnBrand.name$': { [Op.iLike]: `%${brand}%` } } : undefined
          }
        ],
        limit: parseInt(limit),
        offset: parseInt(offset),
        order: [['created_at', 'DESC']]
      });

      res.json({
        yarn: yarn.rows,
        total: yarn.count,
        page: parseInt(page),
        totalPages: Math.ceil(yarn.count / limit)
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  async createYarnEntry(req, res) {
    try {
      const yarnData = {
        ...req.body,
        user_id: req.user.id
      };

      // Handle photo uploads to Google Drive
      if (req.files && req.files.length > 0) {
        const photoPromises = req.files.map(file => 
          uploadToGoogleDrive(file, 'yarn_photos', req.user.id)
        );
        const uploadedPhotos = await Promise.all(photoPromises);
        yarnData.photos = uploadedPhotos;
      }

      const yarn = await YarnInventory.create(yarnData);

      // Sync to Ravelry if connected
      if (req.user.ravelry_access_key) {
        await syncToRavelry('stash', yarn, req.user);
      }

      res.status(201).json(yarn);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  // Additional methods...
}

module.exports = new YarnController();