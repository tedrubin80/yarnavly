version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: yarn_management_db
    environment:
      POSTGRES_DB: yarn_management
      POSTGRES_USER: yarn_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - yarn_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yarn_user"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: yarn_management_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - yarn_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yarn_management_api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://yarn_user:${DB_PASSWORD}@postgres:5432/yarn_management
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      RAVELRY_USERNAME: ${RAVELRY_USERNAME}
      RAVELRY_PASSWORD: ${RAVELRY_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - yarn_network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_ADMIN_URL: ${REACT_APP_ADMIN_URL}
    container_name: yarn_management_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - yarn_network

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: yarn_management_admin
    ports:
      - "3002:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - yarn_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: yarn_management_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
      - admin
    restart: unless-stopped
    networks:
      - yarn_network

volumes:
  postgres_data:
  redis_data:

networks:
  yarn_network:
    driver: bridge